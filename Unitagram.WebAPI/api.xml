<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unitagram.WebAPI</name>
    </assembly>
    <members>
        <member name="T:Unitagram.WebAPI.Controllers.v1.AccountController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Unitagram.WebAPI.Controllers.v1.AccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Unitagram.Core.Domain.Identity.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Unitagram.Core.Domain.Identity.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{Unitagram.Core.Domain.Identity.ApplicationRole},Unitagram.Core.ServiceContracts.IJwtService,Microsoft.Extensions.Logging.ILogger{Unitagram.WebAPI.Controllers.v1.AccountController},Serilog.IDiagnosticContext)">
            <summary>
            
            </summary>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="roleManager"></param>
            <param name="jwtService"></param>
            <param name="logger"></param>
            <param name="diagnosticContext"></param>
        </member>
        <member name="M:Unitagram.WebAPI.Controllers.v1.AccountController.PostRegister(Unitagram.Core.DTO.RegisterDTO)">
            <summary>
            This method handles user registration. It validates the provided registration data, creates a new user with the provided details, and attempts to create 
            the user using the UserManager. If successful, the user is signed in, a JWT token is generated, and the response includes the authentication details. 
            If registration fails, an error message is returned.
            </summary>
            <param name="registerDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Unitagram.WebAPI.Controllers.v1.AccountController.IsEmailAlreadyRegistered(System.String)">
            <summary>
            This method checks if an email address is already registered in the system. It uses the UserManager to find a user with the given email. 
            If the user is found, the response indicates that the email is already registered; otherwise, it's considered available.
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Unitagram.WebAPI.Controllers.v1.AccountController.PostLogin(Unitagram.Core.DTO.LoginDTO)">
            <summary>
             This method handles user login. It validates the provided login data and attempts to sign in the user using the SignInManager. If login is successful, 
             a JWT token is generated, and the response includes the authentication details. If login fails, an error message is returned.
            </summary>
            <param name="loginDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Unitagram.WebAPI.Controllers.v1.AccountController.GetLogout">
            <summary>
            Logout
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unitagram.WebAPI.Controllers.v1.AccountController.GenerateNewAccessToken(Unitagram.Core.DTO.TokenModel)">
            <summary>
            Generates a new access token using a refresh token.
            </summary>
            <param name="tokenModel">The token model containing the refresh token.</param>
            <returns>Returns a new access token if the request is valid; otherwise, returns a BadRequest result.</returns>
        </member>
        <member name="T:Unitagram.WebAPI.Controllers.v1.UniversityController">
            <summary>
            
            </summary>
        </member>
        <member name="T:Unitagram.WebAPI.StartupExtensions.ConfigureServiceExtension">
            <summary>
            Configure Startup(Program) services class
            </summary>
        </member>
        <member name="M:Unitagram.WebAPI.StartupExtensions.ConfigureServiceExtension.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configures services for the application.
            </summary>
            <param name="services">The collection of services to configure.</param>
            <param name="configuration">The configuration data for the application.</param>
            <param name="environment">The current web host environment.</param>
            <returns>The configured services collection.</returns>
        </member>
        <member name="T:Program">
            <summary>
            make the auto-generated Program accessible programmatically
            </summary>
        </member>
    </members>
</doc>
